{"version":3,"sources":["midi.min.js","../../../AppData/Roaming/npm/node_modules/browserify/node_modules/browser-pack/_prelude.js","js/midi/loader.js","js/midi/midi.js","js/midi/player.js","js/midi/stream.js","main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","MIDI","loadMidiFile","midiFile","callback","readBlobAsDataURL","file","FileReader","readAsDataURL","onloadend","target","result","constructor","toString","indexOf","dataurl","midiTracks","intoTracks","intoTemporal","MIDIPlayer","loadSondFont","./midi.js","2","Stream","this","midiDataurl","header","tracks","temporal","beatsPerMinute","prototype","atob","split","u8arr","charCodeAt","stream","console","log","readWord","headerStream","read","readInt32","formatType","readInt16","trackCount","ticksPerBeat","trackStream","eof","event","readEvent","push","currentTime","currentDeltaTime","minTime","trackId","deltaTime","Infinity","tracksCurrentState","position","nextEvent","type","subtype","microsecondsPerBeat","lastEventTypeByte","readVarInt","eventTypeByte","readInt8","subtypeByte","number","text","channel","hourByte","frameRate","0","32","64","96","hour","min","sec","frame","subframe","numerator","denominator","Math","pow","metronome","thirtyseconds","key","scale","data","param1","eventType","noteNumber","velocity","amount","controllerType","value","programNumber","./stream","3","global","loadAudio","instrument","index","bstr","soundFont","buffer","ArrayBuffer","Uint8Array","ctx","decodeAudioData","buffer1","id","keyToNote","audioBuffers","decodeLength","soundFontLength","playTime","beginTime","masterVolume","sources","currentPlayer","sendSignal","x","y","current","noteOn","noteOff","time","currentTimeout","setTimeout","noteId","delay","source","createBufferSource","ouput","createGain","connect","destination","gain","max","start","linearRampToValueAtTime","stopAllNotes","clearPlayer","forEach","clearTimeout","window","AudioContext","noteToKey","A0","C8","number2key","octave","name","Soundfont","xhr","XMLHttpRequest","open","onreadystatechange","evt","readyState","status","root","client","cordova","script","document","createElement","language","responseText","body","appendChild","Object","keys","onerror","send","self","4","str","str1","String","fromCharCode","slice","signed","b","5","./js/midi/loader.js","./js/midi/player.js"],"mappings":"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","file":"midi.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\r\n * Created by chie on 2016/2/26.\r\n */\r\nconst MIDI = require('./midi.js');\r\nconst loadMidiFile = (midiFile, callback) => {\r\n    const readBlobAsDataURL = (file, callback) => {\r\n        let a = new FileReader();\r\n        a.readAsDataURL(file);\r\n        a.onloadend = e =>callback(e.target.result);\r\n    };\r\n    if (midiFile.constructor.toString().indexOf('File') != -1 || midiFile.constructor.toString().indexOf('Blob') != -1) {\r\n        readBlobAsDataURL(midiFile, dataurl => {\r\n            loadMidiFile.midiTracks = new MIDI(dataurl);\r\n            loadMidiFile.midiTracks.intoTracks();\r\n            loadMidiFile.midiTracks.intoTemporal();\r\n            //暂时只支持acoustic_grand_piano\r\n            MIDIPlayer.loadSondFont('acoustic_grand_piano', () =>\r\n                callback(loadMidiFile.midiTracks)\r\n            );\r\n        });\r\n    }\r\n};\r\nloadMidiFile.midiTracks = {};\r\n\r\nmodule.exports = loadMidiFile;\n},{\"./midi.js\":2}],2:[function(require,module,exports){\n/**\r\n * Created by chie on 2016/4/25.\r\n */\r\n\r\n\r\nvar Stream=require('./stream');\r\n\r\nvar MIDI = function (dataurl) {\r\n    this.midiDataurl = dataurl;\r\n    this.header={};\r\n    this.tracks = [];\r\n    this.temporal = [];\r\n    this.beatsPerMinute = 120;\r\n}\r\n\r\nMIDI.prototype = {\r\n    //转为多轨序列\r\n    intoTracks: function () {\r\n        if (!this.midiDataurl) {\r\n            throw 'midiDateurl is null'\r\n        }\r\n        var dataurl = atob(this.midiDataurl.split(',')[1]);\r\n        var n = dataurl.length, u8arr = [];\r\n        while (n--) {\r\n            u8arr[n] = dataurl.charCodeAt(n);\r\n        }\r\n        /*\r\n         var n = dataurl.length;\r\n         var array16 = [];\r\n         while (n--) {\r\n         array16[n] = u8arr[n].toString(16);\r\n         }\r\n         */\r\n        var stream = Stream(u8arr);\r\n        console.log(stream.readWord(4))\r\n        var headerStream = Stream(stream.read(stream.readInt32()));\r\n        this.header.formatType = headerStream.readInt16();\r\n        this.header.trackCount = headerStream.readInt16();\r\n        this.header.ticksPerBeat = headerStream.readInt16();\r\n\r\n        //分轨\r\n        for (var i = 0; i < this.header.trackCount; i++) {\r\n            this.tracks[i] = [];\r\n            console.log(stream.readWord(4))\r\n            var trackStream = Stream(stream.read(stream.readInt32()));\r\n            while (!trackStream.eof()) {\r\n                var event = readEvent(trackStream);\r\n                this.tracks[i].push(event);\r\n            }\r\n        }\r\n    },\r\n    //转为单轨序列\r\n    intoTemporal: function () {\r\n        var currentTime = 0;\r\n        var currentDeltaTime = 0;\r\n        var minTime = {\r\n            trackId: 0,\r\n            deltaTime: Infinity\r\n        };\r\n        var tracksCurrentState = []\r\n        for (var i = 0; i < this.tracks.length; i++) {\r\n            tracksCurrentState[i] = {\r\n                position: 0,\r\n                deltaTime: 0\r\n            };\r\n        }\r\n        while (1) {\r\n            minTime.deltaTime = Infinity;\r\n            for (var i = 0; i < this.tracks.length; i++) {\r\n                if (this.tracks[i][tracksCurrentState[i].position] && this.tracks[i][tracksCurrentState[i].position].deltaTime + tracksCurrentState[i].deltaTime < minTime.deltaTime) {\r\n                    minTime.trackId = i;\r\n                    minTime.deltaTime = this.tracks[i][tracksCurrentState[i].position].deltaTime + tracksCurrentState[i].deltaTime;\r\n                }\r\n            }\r\n            if (minTime.deltaTime != Infinity) {\r\n                var nextEvent = this.tracks[minTime.trackId][tracksCurrentState[minTime.trackId].position];\r\n                this.temporal.push([nextEvent, currentTime += (minTime.deltaTime - currentDeltaTime) / this.header.ticksPerBeat / (this.beatsPerMinute / 60)]);\r\n                tracksCurrentState[minTime.trackId].position++;\r\n                tracksCurrentState[minTime.trackId].deltaTime = minTime.deltaTime;\r\n                currentDeltaTime = tracksCurrentState[minTime.trackId].deltaTime;\r\n                if (nextEvent.type == \"meta\" && nextEvent.subtype == \"setTempo\") {\r\n                    this.beatsPerMinute = 60000000 / nextEvent.microsecondsPerBeat\r\n                }\r\n            } else break;\r\n        }\r\n    }\r\n};\r\n\r\n\r\nvar lastEventTypeByte;\r\n\r\nvar readEvent = function (stream) {\r\n    var event = {};\r\n    event.deltaTime = stream.readVarInt();\r\n    var eventTypeByte = stream.readInt8();\r\n    if ((eventTypeByte & 0xf0) == 0xf0) {\r\n        /* system / meta event */\r\n        if (eventTypeByte == 0xff) {\r\n            /* meta event */\r\n            event.type = 'meta';\r\n            var subtypeByte = stream.readInt8();\r\n            var length = stream.readVarInt();\r\n            switch (subtypeByte) {\r\n                case 0x00:\r\n                    event.subtype = 'sequenceNumber';\r\n                    if (length != 2) throw \"Expected length for sequenceNumber event is 2, got \" + length;\r\n                    event.number = stream.readInt16();\r\n                    return event;\r\n                case 0x01:\r\n                    event.subtype = 'text';\r\n                    event.text = stream.read(length);\r\n                    return event;\r\n                case 0x02:\r\n                    event.subtype = 'copyrightNotice';\r\n                    event.text = stream.read(length);\r\n                    return event;\r\n                case 0x03:\r\n                    event.subtype = 'trackName';\r\n                    event.text = stream.read(length);\r\n                    return event;\r\n                case 0x04:\r\n                    event.subtype = 'instrumentName';\r\n                    event.text = stream.read(length);\r\n                    return event;\r\n                case 0x05:\r\n                    event.subtype = 'lyrics';\r\n                    event.text = stream.read(length);\r\n                    return event;\r\n                case 0x06:\r\n                    event.subtype = 'marker';\r\n                    event.text = stream.read(length);\r\n                    return event;\r\n                case 0x07:\r\n                    event.subtype = 'cuePoint';\r\n                    event.text = stream.read(length);\r\n                    return event;\r\n                case 0x20:\r\n                    event.subtype = 'midiChannelPrefix';\r\n                    if (length != 1) throw \"Expected length for midiChannelPrefix event is 1, got \" + length;\r\n                    event.channel = stream.readInt8();\r\n                    return event;\r\n                case 0x2f:\r\n                    event.subtype = 'endOfTrack';\r\n                    if (length != 0) throw \"Expected length for endOfTrack event is 0, got \" + length;\r\n                    return event;\r\n                case 0x51:\r\n                    event.subtype = 'setTempo';\r\n                    if (length != 3) throw \"Expected length for setTempo event is 3, got \" + length;\r\n                    event.microsecondsPerBeat = (\r\n                        (stream.readInt8() << 16)\r\n                        + (stream.readInt8() << 8)\r\n                        + stream.readInt8()\r\n                    )\r\n                    return event;\r\n                case 0x54:\r\n                    event.subtype = 'smpteOffset';\r\n                    if (length != 5) throw \"Expected length for smpteOffset event is 5, got \" + length;\r\n                    var hourByte = stream.readInt8();\r\n                    event.frameRate = {\r\n                        0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30\r\n                    }[hourByte & 0x60];\r\n                    event.hour = hourByte & 0x1f;\r\n                    event.min = stream.readInt8();\r\n                    event.sec = stream.readInt8();\r\n                    event.frame = stream.readInt8();\r\n                    event.subframe = stream.readInt8();\r\n                    return event;\r\n                case 0x58:\r\n                    event.subtype = 'timeSignature';\r\n                    if (length != 4) throw \"Expected length for timeSignature event is 4, got \" + length;\r\n                    event.numerator = stream.readInt8();\r\n                    event.denominator = Math.pow(2, stream.readInt8());\r\n                    event.metronome = stream.readInt8();\r\n                    event.thirtyseconds = stream.readInt8();\r\n                    return event;\r\n                case 0x59:\r\n                    event.subtype = 'keySignature';\r\n                    if (length != 2) throw \"Expected length for keySignature event is 2, got \" + length;\r\n                    event.key = stream.readInt8(true);\r\n                    event.scale = stream.readInt8();\r\n                    return event;\r\n                case 0x7f:\r\n                    event.subtype = 'sequencerSpecific';\r\n                    event.data = stream.read(length);\r\n                    return event;\r\n                default:\r\n                    // console.log(\"Unrecognised meta event subtype: \" + subtypeByte);\r\n                    event.subtype = 'unknown'\r\n                    event.data = stream.read(length);\r\n                    return event;\r\n            }\r\n            event.data = stream.read(length);\r\n            return event;\r\n        } else if (eventTypeByte == 0xf0) {\r\n            event.type = 'sysEx';\r\n            var length = stream.readVarInt();\r\n            event.data = stream.read(length);\r\n            return event;\r\n        } else if (eventTypeByte == 0xf7) {\r\n            event.type = 'dividedSysEx';\r\n            var length = stream.readVarInt();\r\n            event.data = stream.read(length);\r\n            return event;\r\n        } else {\r\n            throw \"Unrecognised MIDI event type byte: \" + eventTypeByte;\r\n        }\r\n    } else {\r\n        /* channel event */\r\n        var param1;\r\n        if ((eventTypeByte & 0x80) == 0) {\r\n\r\n            param1 = eventTypeByte;\r\n            eventTypeByte = lastEventTypeByte;\r\n        } else {\r\n            param1 = stream.readInt8();\r\n            lastEventTypeByte = eventTypeByte;\r\n        }\r\n        var eventType = eventTypeByte >> 4;\r\n        event.channel = eventTypeByte & 0x0f;\r\n        event.type = 'channel';\r\n        switch (eventType) {\r\n            case 0x08:\r\n                event.subtype = 'noteOff';\r\n                event.noteNumber = param1;\r\n                event.velocity = stream.readInt8();\r\n                return event;\r\n            case 0x09:\r\n                event.noteNumber = param1;\r\n                event.velocity = stream.readInt8();\r\n                if (event.velocity == 0) {\r\n                    event.subtype = 'noteOff';\r\n                } else {\r\n                    event.subtype = 'noteOn';\r\n                }\r\n                return event;\r\n            case 0x0a:\r\n                event.subtype = 'noteAftertouch';\r\n                event.noteNumber = param1;\r\n                event.amount = stream.readInt8();\r\n                return event;\r\n            case 0x0b:\r\n                event.subtype = 'controller';\r\n                event.controllerType = param1;\r\n                event.value = stream.readInt8();\r\n                return event;\r\n            case 0x0c:\r\n                event.subtype = 'programChange';\r\n                event.programNumber = param1;\r\n                return event;\r\n            case 0x0d:\r\n                event.subtype = 'channelAftertouch';\r\n                event.amount = param1;\r\n                return event;\r\n            case 0x0e:\r\n                event.subtype = 'pitchBend';\r\n                event.value = param1 + (stream.readInt8() << 7);\r\n                return event;\r\n            default:\r\n                throw \"Unrecognised MIDI event type: \" + eventType\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports=MIDI;\n},{\"./stream\":4}],3:[function(require,module,exports){\n(function (global){\n/**\r\n * Created by chie on 2016/4/25.\r\n */\r\n\r\n\r\nlet MIDIPlayer = function (midiTracks) {\r\n    this.temporal = midiTracks.temporal;\r\n    this.playTime = ctx.currentTime;\r\n    this.beginTime = this.playTime;\r\n    this.masterVolume = 127;\r\n    this.sources = {};\r\n    MIDIPlayer.currentPlayer.push(this);\r\n}\r\n\r\nMIDIPlayer.prototype.sendSignal = function (x, y) {\r\n    y = y || 5;\r\n    let current = this;\r\n    for (let i = x; i < this.temporal.length && i < x + y; i++) {\r\n        switch (this.temporal[i][0].subtype) {\r\n            case 'noteOn':\r\n                this.noteOn('acoustic_grand_piano', this.temporal[i][0].noteNumber, this.temporal[i][0].velocity, this.temporal[i][1])\r\n                break;\r\n            case 'noteOff':\r\n                this.noteOff('acoustic_grand_piano', this.temporal[i][0].noteNumber, this.temporal[i][1]);\r\n                break;\r\n        }\r\n    }\r\n\r\n    if ((x + y) < this.temporal.length) {\r\n        let time = (this.temporal[(x + y)][1] - ctx.currentTime + this.beginTime) * 1000 - 500;\r\n        this.currentTimeout = setTimeout(function () {\r\n            current.playTime = ctx.currentTime;\r\n            current.sendSignal(x + y, y);\r\n        }, time);\r\n    }\r\n}\r\n\r\nMIDIPlayer.prototype.noteOn = function (instrument, noteId, velocity, delay) {\r\n    let source = ctx.createBufferSource();\r\n    source.buffer = audioBuffers[instrument + ' ' + noteId];\r\n    let ouput = ctx.createGain();\r\n    ouput.connect(ctx.destination);\r\n    ouput.gain.value = Math.min(1.0, Math.max(-1.0, (velocity / 127) * (this.masterVolume / 127)));\r\n    source.gain = ouput;\r\n    source.connect(ouput);\r\n    //此处可添加音频效果器\r\n    /*\r\n     var feedbackNode = ctx.createGain();\r\n     feedbackNode.gain.value = 1;\r\n\r\n     var filter = ctx.createBiquadFilter();\r\n     filter.frequency.value = 1000;\r\n\r\n     var delayNode = ctx.createDelay();\r\n     delayNode.delayTime.value = 0.15;\r\n\r\n     delayNode.connect(filter);\r\n     filter.connect(feedbackNode)\r\n\r\n     source.connect(delayNode);\r\n\r\n     feedbackNode.connect(ouput);\r\n     */\r\n    delay = delay - ctx.currentTime + this.playTime + this.beginTime\r\n    source.start(delay);\r\n    this.sources[noteId] = source;\r\n};\r\n\r\nMIDIPlayer.prototype.noteOff = function (instrument, noteId, delay) {\r\n    let buffer = audioBuffers[instrument + ' ' + noteId];\r\n    if (buffer) {\r\n        let source = this.sources[noteId];\r\n        if (source) {\r\n            delay = delay - ctx.currentTime + this.playTime + this.beginTime\r\n\r\n            if (source.gain) {\r\n                var gain = source.gain.gain;\r\n                gain.linearRampToValueAtTime(gain.value, delay);\r\n                gain.linearRampToValueAtTime(0, delay + 0.3);\r\n            }\r\n            this.sources[noteId] = null;\r\n            return source;\r\n        }\r\n    }\r\n}\r\n\r\nMIDIPlayer.prototype.stopAllNotes = function () {\r\n    for (var a in this.sources) {\r\n        var source = this.sources[a];\r\n        if (source && source.gain) {\r\n            var gain = source.gain.gain;\r\n            gain.linearRampToValueAtTime(gain.value, 0);\r\n            gain.linearRampToValueAtTime(0, 0 + 0.3);\r\n            source = null;\r\n        }\r\n    }\r\n}\r\n\r\nMIDIPlayer.currentPlayer = [];\r\n\r\nMIDIPlayer.clearPlayer = function () {\r\n    MIDIPlayer.currentPlayer.forEach(function (a) {\r\n        clearTimeout(a.currentTimeout)\r\n        //静音\r\n        a.stopAllNotes();\r\n    });\r\n    MIDIPlayer.currentPlayer = [];\r\n}\r\n\r\nglobal.ctx = new window.AudioContext();\r\nvar soundFont;\r\nvar audioBuffers = {};\r\nvar soundFontLength, decodeLength;\r\nvar keyToNote = {}; // C8  == 108\r\nvar noteToKey = {}; // 108 ==  C8\r\n\r\n(function () {\r\n    var A0 = 0x15; // first note\r\n    var C8 = 0x6C; // last note\r\n    var number2key = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\r\n    for (var n = A0; n <= C8; n++) {\r\n        var octave = (n - 12) / 12 >> 0;\r\n        var name = number2key[n % 12] + octave;\r\n        keyToNote[name] = n;\r\n        noteToKey[n] = name;\r\n    }\r\n})();\r\n\r\nMIDIPlayer.loadSondFont = function (instrument, callback) {\r\n    instrument = instrument || 'acoustic_grand_piano';\r\n    decodeLength = 0;\r\n\r\n    if (typeof MIDI !== 'undefined' && MIDI.Soundfont[instrument]) { // already loaded\r\n        console.log('already cached')\r\n        callback();\r\n    } else {\r\n        var xhr = new XMLHttpRequest();\r\n\r\n        //自行更改soundfont地址\r\n        xhr.open('GET', './js/soundfont/' + instrument + '-mp3.js', true);\r\n        \r\n        xhr.onreadystatechange = function (evt) {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200 ||\r\n                    xhr.status === 304 ||    // Not Modified\r\n                    xhr.status === 308 ||    // Permanent Redirect\r\n                    xhr.status === 0 && root.client.cordova // Cordova quirk\r\n                ) {\r\n                    var script = document.createElement('script');\r\n                    script.language = 'javascript';\r\n                    script.type = 'text/javascript';\r\n                    script.text = evt.target.responseText;\r\n                    document.body.appendChild(script);\r\n                    soundFont = MIDI.Soundfont[instrument]\r\n                    soundFontLength = Object.keys(soundFont).length;\r\n                    for (var index in soundFont) {\r\n                        loadAudio(instrument, index, callback);\r\n                    }\r\n                } else {\r\n                    onerror && onerror.call(xhr, evt);\r\n                }\r\n            }\r\n        }\r\n        xhr.send();\r\n    }\r\n}\r\n\r\nfunction loadAudio(instrument, index, callback) {\r\n    var bstr = atob(soundFont[index].split(',')[1]), n = bstr.length, buffer = new ArrayBuffer(n), u8arr = new Uint8Array(buffer);\r\n    while (n--) {\r\n        u8arr[n] = bstr.charCodeAt(n);\r\n    }\r\n    ctx.decodeAudioData(buffer, function (buffer1) {\r\n        buffer1.id = keyToNote[index]\r\n        if (buffer1.id) {\r\n            audioBuffers[instrument + ' ' + buffer1.id] = buffer1;\r\n        }\r\n        if (++decodeLength === soundFontLength) {\r\n            console.log(\"finish\")\r\n            callback();\r\n        }\r\n    })\r\n}\r\n\r\nmodule.exports = MIDIPlayer;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],4:[function(require,module,exports){\n/**\r\n * Created by chie on 2016/2/25.\r\n */\r\nfunction Stream(str) {\r\n    var position = 0;\r\n    \r\n    function readWord(length) {\r\n        \r\n        var str1=''\r\n        for(var i=0;i<length;i++){\r\n            str1+=String.fromCharCode(str[position+i])\r\n        }\r\n        position+=length;\r\n        return str1;\r\n    }\r\n    function read(length){\r\n        position+=length;\r\n        return str.slice(position-length,position)\r\n    }\r\n    //读32位，以此类推\r\n    function readInt32() {\r\n        var result = (\r\n        (str[position] << 24)\r\n        + (str[position + 1] << 16)\r\n        + (str[position + 2] << 8)\r\n        + str[position + 3]);\r\n        position += 4;\r\n        return result;\r\n    }\r\n\r\n    function readInt16() {\r\n        var result = (\r\n        (str[position] << 8)\r\n        + str[position + 1]);\r\n        position += 2;\r\n        return result;\r\n    }\r\n\r\n    function readInt8(signed) {\r\n        var result = str[position];\r\n        if (signed && result > 127) result -= 256;\r\n        position += 1;\r\n        return result;\r\n    }\r\n\r\n    function eof() {\r\n        return position >= str.length;\r\n    }\r\n    //读变长\r\n    function readVarInt() {\r\n        var result = 0;\r\n        while (true) {\r\n            var b = readInt8();\r\n            if (b & 0x80) {\r\n                result += (b & 0x7f);\r\n                result <<= 7;\r\n            } else {\r\n                return result + b;\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        'eof': eof,\r\n        'read': read,\r\n        'readInt32': readInt32,\r\n        'readInt16': readInt16,\r\n        'readInt8': readInt8,\r\n        'readVarInt': readVarInt,\r\n        'readWord':readWord\r\n    }\r\n}\r\n\r\nmodule.exports=Stream;\n},{}],5:[function(require,module,exports){\n(function (global){\n/**\r\n * Created by chie on 2016/5/21.\r\n */\r\n\r\nglobal.MIDIPlayer=require('./js/midi/player.js');\r\nglobal.loadMidiFile=require('./js/midi/loader.js');\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./js/midi/loader.js\":1,\"./js/midi/player.js\":3}]},{},[5])\n\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * Created by chie on 2016/2/26.\r\n */\r\nconst MIDI = require('./midi.js');\r\nconst loadMidiFile = (midiFile, callback) => {\r\n    const readBlobAsDataURL = (file, callback) => {\r\n        let a = new FileReader();\r\n        a.readAsDataURL(file);\r\n        a.onloadend = e =>callback(e.target.result);\r\n    };\r\n    if (midiFile.constructor.toString().indexOf('File') != -1 || midiFile.constructor.toString().indexOf('Blob') != -1) {\r\n        readBlobAsDataURL(midiFile, dataurl => {\r\n            loadMidiFile.midiTracks = new MIDI(dataurl);\r\n            loadMidiFile.midiTracks.intoTracks();\r\n            loadMidiFile.midiTracks.intoTemporal();\r\n            //暂时只支持acoustic_grand_piano\r\n            MIDIPlayer.loadSondFont('acoustic_grand_piano', () =>\r\n                callback(loadMidiFile.midiTracks)\r\n            );\r\n        });\r\n    }\r\n};\r\nloadMidiFile.midiTracks = {};\r\n\r\nmodule.exports = loadMidiFile;","/**\r\n * Created by chie on 2016/4/25.\r\n */\r\n\r\n\r\nvar Stream=require('./stream');\r\n\r\nvar MIDI = function (dataurl) {\r\n    this.midiDataurl = dataurl;\r\n    this.header={};\r\n    this.tracks = [];\r\n    this.temporal = [];\r\n    this.beatsPerMinute = 120;\r\n}\r\n\r\nMIDI.prototype = {\r\n    //转为多轨序列\r\n    intoTracks: function () {\r\n        if (!this.midiDataurl) {\r\n            throw 'midiDateurl is null'\r\n        }\r\n        var dataurl = atob(this.midiDataurl.split(',')[1]);\r\n        var n = dataurl.length, u8arr = [];\r\n        while (n--) {\r\n            u8arr[n] = dataurl.charCodeAt(n);\r\n        }\r\n        /*\r\n         var n = dataurl.length;\r\n         var array16 = [];\r\n         while (n--) {\r\n         array16[n] = u8arr[n].toString(16);\r\n         }\r\n         */\r\n        var stream = Stream(u8arr);\r\n        console.log(stream.readWord(4))\r\n        var headerStream = Stream(stream.read(stream.readInt32()));\r\n        this.header.formatType = headerStream.readInt16();\r\n        this.header.trackCount = headerStream.readInt16();\r\n        this.header.ticksPerBeat = headerStream.readInt16();\r\n\r\n        //分轨\r\n        for (var i = 0; i < this.header.trackCount; i++) {\r\n            this.tracks[i] = [];\r\n            console.log(stream.readWord(4))\r\n            var trackStream = Stream(stream.read(stream.readInt32()));\r\n            while (!trackStream.eof()) {\r\n                var event = readEvent(trackStream);\r\n                this.tracks[i].push(event);\r\n            }\r\n        }\r\n    },\r\n    //转为单轨序列\r\n    intoTemporal: function () {\r\n        var currentTime = 0;\r\n        var currentDeltaTime = 0;\r\n        var minTime = {\r\n            trackId: 0,\r\n            deltaTime: Infinity\r\n        };\r\n        var tracksCurrentState = []\r\n        for (var i = 0; i < this.tracks.length; i++) {\r\n            tracksCurrentState[i] = {\r\n                position: 0,\r\n                deltaTime: 0\r\n            };\r\n        }\r\n        while (1) {\r\n            minTime.deltaTime = Infinity;\r\n            for (var i = 0; i < this.tracks.length; i++) {\r\n                if (this.tracks[i][tracksCurrentState[i].position] && this.tracks[i][tracksCurrentState[i].position].deltaTime + tracksCurrentState[i].deltaTime < minTime.deltaTime) {\r\n                    minTime.trackId = i;\r\n                    minTime.deltaTime = this.tracks[i][tracksCurrentState[i].position].deltaTime + tracksCurrentState[i].deltaTime;\r\n                }\r\n            }\r\n            if (minTime.deltaTime != Infinity) {\r\n                var nextEvent = this.tracks[minTime.trackId][tracksCurrentState[minTime.trackId].position];\r\n                this.temporal.push([nextEvent, currentTime += (minTime.deltaTime - currentDeltaTime) / this.header.ticksPerBeat / (this.beatsPerMinute / 60)]);\r\n                tracksCurrentState[minTime.trackId].position++;\r\n                tracksCurrentState[minTime.trackId].deltaTime = minTime.deltaTime;\r\n                currentDeltaTime = tracksCurrentState[minTime.trackId].deltaTime;\r\n                if (nextEvent.type == \"meta\" && nextEvent.subtype == \"setTempo\") {\r\n                    this.beatsPerMinute = 60000000 / nextEvent.microsecondsPerBeat\r\n                }\r\n            } else break;\r\n        }\r\n    }\r\n};\r\n\r\n\r\nvar lastEventTypeByte;\r\n\r\nvar readEvent = function (stream) {\r\n    var event = {};\r\n    event.deltaTime = stream.readVarInt();\r\n    var eventTypeByte = stream.readInt8();\r\n    if ((eventTypeByte & 0xf0) == 0xf0) {\r\n        /* system / meta event */\r\n        if (eventTypeByte == 0xff) {\r\n            /* meta event */\r\n            event.type = 'meta';\r\n            var subtypeByte = stream.readInt8();\r\n            var length = stream.readVarInt();\r\n            switch (subtypeByte) {\r\n                case 0x00:\r\n                    event.subtype = 'sequenceNumber';\r\n                    if (length != 2) throw \"Expected length for sequenceNumber event is 2, got \" + length;\r\n                    event.number = stream.readInt16();\r\n                    return event;\r\n                case 0x01:\r\n                    event.subtype = 'text';\r\n                    event.text = stream.read(length);\r\n                    return event;\r\n                case 0x02:\r\n                    event.subtype = 'copyrightNotice';\r\n                    event.text = stream.read(length);\r\n                    return event;\r\n                case 0x03:\r\n                    event.subtype = 'trackName';\r\n                    event.text = stream.read(length);\r\n                    return event;\r\n                case 0x04:\r\n                    event.subtype = 'instrumentName';\r\n                    event.text = stream.read(length);\r\n                    return event;\r\n                case 0x05:\r\n                    event.subtype = 'lyrics';\r\n                    event.text = stream.read(length);\r\n                    return event;\r\n                case 0x06:\r\n                    event.subtype = 'marker';\r\n                    event.text = stream.read(length);\r\n                    return event;\r\n                case 0x07:\r\n                    event.subtype = 'cuePoint';\r\n                    event.text = stream.read(length);\r\n                    return event;\r\n                case 0x20:\r\n                    event.subtype = 'midiChannelPrefix';\r\n                    if (length != 1) throw \"Expected length for midiChannelPrefix event is 1, got \" + length;\r\n                    event.channel = stream.readInt8();\r\n                    return event;\r\n                case 0x2f:\r\n                    event.subtype = 'endOfTrack';\r\n                    if (length != 0) throw \"Expected length for endOfTrack event is 0, got \" + length;\r\n                    return event;\r\n                case 0x51:\r\n                    event.subtype = 'setTempo';\r\n                    if (length != 3) throw \"Expected length for setTempo event is 3, got \" + length;\r\n                    event.microsecondsPerBeat = (\r\n                        (stream.readInt8() << 16)\r\n                        + (stream.readInt8() << 8)\r\n                        + stream.readInt8()\r\n                    )\r\n                    return event;\r\n                case 0x54:\r\n                    event.subtype = 'smpteOffset';\r\n                    if (length != 5) throw \"Expected length for smpteOffset event is 5, got \" + length;\r\n                    var hourByte = stream.readInt8();\r\n                    event.frameRate = {\r\n                        0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30\r\n                    }[hourByte & 0x60];\r\n                    event.hour = hourByte & 0x1f;\r\n                    event.min = stream.readInt8();\r\n                    event.sec = stream.readInt8();\r\n                    event.frame = stream.readInt8();\r\n                    event.subframe = stream.readInt8();\r\n                    return event;\r\n                case 0x58:\r\n                    event.subtype = 'timeSignature';\r\n                    if (length != 4) throw \"Expected length for timeSignature event is 4, got \" + length;\r\n                    event.numerator = stream.readInt8();\r\n                    event.denominator = Math.pow(2, stream.readInt8());\r\n                    event.metronome = stream.readInt8();\r\n                    event.thirtyseconds = stream.readInt8();\r\n                    return event;\r\n                case 0x59:\r\n                    event.subtype = 'keySignature';\r\n                    if (length != 2) throw \"Expected length for keySignature event is 2, got \" + length;\r\n                    event.key = stream.readInt8(true);\r\n                    event.scale = stream.readInt8();\r\n                    return event;\r\n                case 0x7f:\r\n                    event.subtype = 'sequencerSpecific';\r\n                    event.data = stream.read(length);\r\n                    return event;\r\n                default:\r\n                    // console.log(\"Unrecognised meta event subtype: \" + subtypeByte);\r\n                    event.subtype = 'unknown'\r\n                    event.data = stream.read(length);\r\n                    return event;\r\n            }\r\n            event.data = stream.read(length);\r\n            return event;\r\n        } else if (eventTypeByte == 0xf0) {\r\n            event.type = 'sysEx';\r\n            var length = stream.readVarInt();\r\n            event.data = stream.read(length);\r\n            return event;\r\n        } else if (eventTypeByte == 0xf7) {\r\n            event.type = 'dividedSysEx';\r\n            var length = stream.readVarInt();\r\n            event.data = stream.read(length);\r\n            return event;\r\n        } else {\r\n            throw \"Unrecognised MIDI event type byte: \" + eventTypeByte;\r\n        }\r\n    } else {\r\n        /* channel event */\r\n        var param1;\r\n        if ((eventTypeByte & 0x80) == 0) {\r\n\r\n            param1 = eventTypeByte;\r\n            eventTypeByte = lastEventTypeByte;\r\n        } else {\r\n            param1 = stream.readInt8();\r\n            lastEventTypeByte = eventTypeByte;\r\n        }\r\n        var eventType = eventTypeByte >> 4;\r\n        event.channel = eventTypeByte & 0x0f;\r\n        event.type = 'channel';\r\n        switch (eventType) {\r\n            case 0x08:\r\n                event.subtype = 'noteOff';\r\n                event.noteNumber = param1;\r\n                event.velocity = stream.readInt8();\r\n                return event;\r\n            case 0x09:\r\n                event.noteNumber = param1;\r\n                event.velocity = stream.readInt8();\r\n                if (event.velocity == 0) {\r\n                    event.subtype = 'noteOff';\r\n                } else {\r\n                    event.subtype = 'noteOn';\r\n                }\r\n                return event;\r\n            case 0x0a:\r\n                event.subtype = 'noteAftertouch';\r\n                event.noteNumber = param1;\r\n                event.amount = stream.readInt8();\r\n                return event;\r\n            case 0x0b:\r\n                event.subtype = 'controller';\r\n                event.controllerType = param1;\r\n                event.value = stream.readInt8();\r\n                return event;\r\n            case 0x0c:\r\n                event.subtype = 'programChange';\r\n                event.programNumber = param1;\r\n                return event;\r\n            case 0x0d:\r\n                event.subtype = 'channelAftertouch';\r\n                event.amount = param1;\r\n                return event;\r\n            case 0x0e:\r\n                event.subtype = 'pitchBend';\r\n                event.value = param1 + (stream.readInt8() << 7);\r\n                return event;\r\n            default:\r\n                throw \"Unrecognised MIDI event type: \" + eventType\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports=MIDI;","/**\r\n * Created by chie on 2016/4/25.\r\n */\r\n\r\n\r\nlet MIDIPlayer = function (midiTracks) {\r\n    this.temporal = midiTracks.temporal;\r\n    this.playTime = ctx.currentTime;\r\n    this.beginTime = this.playTime;\r\n    this.masterVolume = 127;\r\n    this.sources = {};\r\n    MIDIPlayer.currentPlayer.push(this);\r\n}\r\n\r\nMIDIPlayer.prototype.sendSignal = function (x, y) {\r\n    y = y || 5;\r\n    let current = this;\r\n    for (let i = x; i < this.temporal.length && i < x + y; i++) {\r\n        switch (this.temporal[i][0].subtype) {\r\n            case 'noteOn':\r\n                this.noteOn('acoustic_grand_piano', this.temporal[i][0].noteNumber, this.temporal[i][0].velocity, this.temporal[i][1])\r\n                break;\r\n            case 'noteOff':\r\n                this.noteOff('acoustic_grand_piano', this.temporal[i][0].noteNumber, this.temporal[i][1]);\r\n                break;\r\n        }\r\n    }\r\n\r\n    if ((x + y) < this.temporal.length) {\r\n        let time = (this.temporal[(x + y)][1] - ctx.currentTime + this.beginTime) * 1000 - 500;\r\n        this.currentTimeout = setTimeout(function () {\r\n            current.playTime = ctx.currentTime;\r\n            current.sendSignal(x + y, y);\r\n        }, time);\r\n    }\r\n}\r\n\r\nMIDIPlayer.prototype.noteOn = function (instrument, noteId, velocity, delay) {\r\n    let source = ctx.createBufferSource();\r\n    source.buffer = audioBuffers[instrument + ' ' + noteId];\r\n    let ouput = ctx.createGain();\r\n    ouput.connect(ctx.destination);\r\n    ouput.gain.value = Math.min(1.0, Math.max(-1.0, (velocity / 127) * (this.masterVolume / 127)));\r\n    source.gain = ouput;\r\n    source.connect(ouput);\r\n    //此处可添加音频效果器\r\n    /*\r\n     var feedbackNode = ctx.createGain();\r\n     feedbackNode.gain.value = 1;\r\n\r\n     var filter = ctx.createBiquadFilter();\r\n     filter.frequency.value = 1000;\r\n\r\n     var delayNode = ctx.createDelay();\r\n     delayNode.delayTime.value = 0.15;\r\n\r\n     delayNode.connect(filter);\r\n     filter.connect(feedbackNode)\r\n\r\n     source.connect(delayNode);\r\n\r\n     feedbackNode.connect(ouput);\r\n     */\r\n    delay = delay - ctx.currentTime + this.playTime + this.beginTime\r\n    source.start(delay);\r\n    this.sources[noteId] = source;\r\n};\r\n\r\nMIDIPlayer.prototype.noteOff = function (instrument, noteId, delay) {\r\n    let buffer = audioBuffers[instrument + ' ' + noteId];\r\n    if (buffer) {\r\n        let source = this.sources[noteId];\r\n        if (source) {\r\n            delay = delay - ctx.currentTime + this.playTime + this.beginTime\r\n\r\n            if (source.gain) {\r\n                var gain = source.gain.gain;\r\n                gain.linearRampToValueAtTime(gain.value, delay);\r\n                gain.linearRampToValueAtTime(0, delay + 0.3);\r\n            }\r\n            this.sources[noteId] = null;\r\n            return source;\r\n        }\r\n    }\r\n}\r\n\r\nMIDIPlayer.prototype.stopAllNotes = function () {\r\n    for (var a in this.sources) {\r\n        var source = this.sources[a];\r\n        if (source && source.gain) {\r\n            var gain = source.gain.gain;\r\n            gain.linearRampToValueAtTime(gain.value, 0);\r\n            gain.linearRampToValueAtTime(0, 0 + 0.3);\r\n            source = null;\r\n        }\r\n    }\r\n}\r\n\r\nMIDIPlayer.currentPlayer = [];\r\n\r\nMIDIPlayer.clearPlayer = function () {\r\n    MIDIPlayer.currentPlayer.forEach(function (a) {\r\n        clearTimeout(a.currentTimeout)\r\n        //静音\r\n        a.stopAllNotes();\r\n    });\r\n    MIDIPlayer.currentPlayer = [];\r\n}\r\n\r\nglobal.ctx = new window.AudioContext();\r\nvar soundFont;\r\nvar audioBuffers = {};\r\nvar soundFontLength, decodeLength;\r\nvar keyToNote = {}; // C8  == 108\r\nvar noteToKey = {}; // 108 ==  C8\r\n\r\n(function () {\r\n    var A0 = 0x15; // first note\r\n    var C8 = 0x6C; // last note\r\n    var number2key = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\r\n    for (var n = A0; n <= C8; n++) {\r\n        var octave = (n - 12) / 12 >> 0;\r\n        var name = number2key[n % 12] + octave;\r\n        keyToNote[name] = n;\r\n        noteToKey[n] = name;\r\n    }\r\n})();\r\n\r\nMIDIPlayer.loadSondFont = function (instrument, callback) {\r\n    instrument = instrument || 'acoustic_grand_piano';\r\n    decodeLength = 0;\r\n\r\n    if (typeof MIDI !== 'undefined' && MIDI.Soundfont[instrument]) { // already loaded\r\n        console.log('already cached')\r\n        callback();\r\n    } else {\r\n        var xhr = new XMLHttpRequest();\r\n\r\n        //自行更改soundfont地址\r\n        xhr.open('GET', './js/soundfont/' + instrument + '-mp3.js', true);\r\n        \r\n        xhr.onreadystatechange = function (evt) {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200 ||\r\n                    xhr.status === 304 ||    // Not Modified\r\n                    xhr.status === 308 ||    // Permanent Redirect\r\n                    xhr.status === 0 && root.client.cordova // Cordova quirk\r\n                ) {\r\n                    var script = document.createElement('script');\r\n                    script.language = 'javascript';\r\n                    script.type = 'text/javascript';\r\n                    script.text = evt.target.responseText;\r\n                    document.body.appendChild(script);\r\n                    soundFont = MIDI.Soundfont[instrument]\r\n                    soundFontLength = Object.keys(soundFont).length;\r\n                    for (var index in soundFont) {\r\n                        loadAudio(instrument, index, callback);\r\n                    }\r\n                } else {\r\n                    onerror && onerror.call(xhr, evt);\r\n                }\r\n            }\r\n        }\r\n        xhr.send();\r\n    }\r\n}\r\n\r\nfunction loadAudio(instrument, index, callback) {\r\n    var bstr = atob(soundFont[index].split(',')[1]), n = bstr.length, buffer = new ArrayBuffer(n), u8arr = new Uint8Array(buffer);\r\n    while (n--) {\r\n        u8arr[n] = bstr.charCodeAt(n);\r\n    }\r\n    ctx.decodeAudioData(buffer, function (buffer1) {\r\n        buffer1.id = keyToNote[index]\r\n        if (buffer1.id) {\r\n            audioBuffers[instrument + ' ' + buffer1.id] = buffer1;\r\n        }\r\n        if (++decodeLength === soundFontLength) {\r\n            console.log(\"finish\")\r\n            callback();\r\n        }\r\n    })\r\n}\r\n\r\nmodule.exports = MIDIPlayer;","/**\r\n * Created by chie on 2016/2/25.\r\n */\r\nfunction Stream(str) {\r\n    var position = 0;\r\n    \r\n    function readWord(length) {\r\n        \r\n        var str1=''\r\n        for(var i=0;i<length;i++){\r\n            str1+=String.fromCharCode(str[position+i])\r\n        }\r\n        position+=length;\r\n        return str1;\r\n    }\r\n    function read(length){\r\n        position+=length;\r\n        return str.slice(position-length,position)\r\n    }\r\n    //读32位，以此类推\r\n    function readInt32() {\r\n        var result = (\r\n        (str[position] << 24)\r\n        + (str[position + 1] << 16)\r\n        + (str[position + 2] << 8)\r\n        + str[position + 3]);\r\n        position += 4;\r\n        return result;\r\n    }\r\n\r\n    function readInt16() {\r\n        var result = (\r\n        (str[position] << 8)\r\n        + str[position + 1]);\r\n        position += 2;\r\n        return result;\r\n    }\r\n\r\n    function readInt8(signed) {\r\n        var result = str[position];\r\n        if (signed && result > 127) result -= 256;\r\n        position += 1;\r\n        return result;\r\n    }\r\n\r\n    function eof() {\r\n        return position >= str.length;\r\n    }\r\n    //读变长\r\n    function readVarInt() {\r\n        var result = 0;\r\n        while (true) {\r\n            var b = readInt8();\r\n            if (b & 0x80) {\r\n                result += (b & 0x7f);\r\n                result <<= 7;\r\n            } else {\r\n                return result + b;\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        'eof': eof,\r\n        'read': read,\r\n        'readInt32': readInt32,\r\n        'readInt16': readInt16,\r\n        'readInt8': readInt8,\r\n        'readVarInt': readVarInt,\r\n        'readWord':readWord\r\n    }\r\n}\r\n\r\nmodule.exports=Stream;","/**\r\n * Created by chie on 2016/5/21.\r\n */\r\n\r\nglobal.MIDIPlayer=require('./js/midi/player.js');\r\nglobal.loadMidiFile=require('./js/midi/loader.js');"],"sourceRoot":"/source/"}